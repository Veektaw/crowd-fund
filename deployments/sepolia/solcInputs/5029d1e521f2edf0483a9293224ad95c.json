{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\nimport \"contracts/PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract fundMe {\n    using PriceConverter for uint256;\n    uint256 public constant MINIMUM_USD = 60 * 1e18;\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        // Requires an amount of ETH to USD to pass\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Not enough ETH\"\n        );\n\n        // Add address of the funder to an array\n        funders.push(msg.sender);\n\n        // Map the value of the fund to the funder\n        addressToAmountFunded[msg.sender] += msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        // Loop through the array of funders\n        for (\n            uint256 fundersIndex = 0;\n            fundersIndex < funders.length;\n            ++fundersIndex\n        ) {\n            address funder = funders[fundersIndex];\n            addressToAmountFunded[funder] = 0;\n\n            // Reset the funders array\n            funders = new address[](0);\n\n            // trasnfer the funds using 'transfer'\n\n            // payable (msg.sender). transfer(address(this).balance);\n\n            // Transfer the funds using 'send'\n\n            // bool sendSuccess = payable (msg .sender). send (address (this).balance);\n            // require (sendSuccess, \"Send failed\");\n\n            // Transfer the funds using 'call'\n            (bool callSuccess, ) = payable(msg.sender).call{\n                value: address(this).balance\n            }(\"\");\n            require(callSuccess, \"Call failed\");\n        }\n    }\n\n    modifier onlyOwner() {\n        // Check if the person calling the withdraw function is the owner of the contract\n\n        // require(msg.sender == i_owner, \"You are not the owner\");\n\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        }\n        _;\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}